"""Vulnerability saving agent."""

from loguru import logger
import uuid
from red_teaming.models import RedTeamingState, Vulnerability
from red_teaming.config import Config
from red_teaming.utils import save_json, create_output_dir


class VulnerabilitySaver:
    """Agent responsible for saving discovered vulnerabilities."""

    def __init__(self, config: Config):
        self.config = config
        self.output_dir = None  # Will be created on first save

    async def save_vulnerability(self, state: RedTeamingState) -> RedTeamingState:
        """Save a discovered vulnerability."""
        if not state.current_conversation or not state.current_conversation.success:
            logger.error("No vulnerability to save")
            return state

        logger.info("Saving discovered vulnerability")

        analysis = state.current_conversation.metadata.get("last_analysis", {})

        vulnerability = Vulnerability(
            id=str(uuid.uuid4()),
            type=state.current_vulnerability_type,
            severity=state.current_conversation.severity,
            title=f"{state.current_vulnerability_type.value.replace('_', ' ').title()} Vulnerability",
            description=analysis.get(
                "explanation", "Vulnerability detected through red-teaming"
            ),
            attack_vector=state.current_conversation.messages[-2].content,
            conversation_id=state.current_conversation.id,
            proof_of_concept=state.current_conversation.messages[-1].content,
            mitigation_suggestions=[
                "Implement additional safety filters",
                "Improve training on edge cases",
                "Add monitoring for this vulnerability type",
            ],
            metadata={
                "confidence": analysis.get("confidence", 0),
                "evidence": analysis.get("evidence", ""),
                "conversation_turns": len(state.current_conversation.messages),
            },
        )

        state.discovered_vulnerabilities.append(vulnerability)
        logger.info(f"Vulnerability saved. Total found: {state.issues_found}")

        # Save vulnerability to file immediately
        try:
            # Create output directory once and reuse it
            if self.output_dir is None:
                self.output_dir = create_output_dir(self.config.output.output_dir)

            vuln_file = (
                self.output_dir
                / "vulnerabilities"
                / f"vulnerability_{vulnerability.id}.json"
            )
            save_json(vulnerability.to_dict(), vuln_file)
            logger.info(f"Vulnerability saved to file: {vuln_file}")
        except Exception as e:
            logger.error(f"Error saving vulnerability to file: {e}")

        # Reset current conversation since we've saved the vulnerability
        state.current_conversation = None
        state.conversation_turn = 0

        return state
